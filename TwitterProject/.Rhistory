warren_query = paste0("@ewarren -filter:retweets -filter:replies since:",dateStart," until:",dateEnd)
warren_tweets <- search_tweets(warren_query, n = 100000, retryonratelimit = TRUE)
save(warren_tweets,file=paste0("warren_",dateStart,".Rda"))
buttigieg_query = paste0("@PeteButtigieg -filter:retweets -filter:replies since:",dateStart," until:",dateEnd)
buttigieg_tweets <- search_tweets(buttigieg_query, n = 100000, retryonratelimit = TRUE)
save(buttigieg_tweets,file=paste0("buttigieg_",dateStart,".Rda"))
klobuchar_query = paste0("@amyklobuchar -filter:retweets -filter:replies since:",dateStart," until:",dateEnd)
klobuchar_tweets <- search_tweets(klobuchar_query, n = 100000, retryonratelimit = TRUE)
save(klobuchar_tweets,file=paste0("klobuchar_",dateStart,".Rda"))
bloomberg_query = paste0("@MikeBloomberg -filter:retweets -filter:replies since:",dateStart," until:",dateEnd)
bloomberg_tweets <- search_tweets(bloomberg_query, n = 100000, retryonratelimit = TRUE)
save(bloomberg_tweets,file=paste0("bloomberg_",dateStart,".Rda"))
steyer_query = paste0("@TomSteyer -filter:retweets -filter:replies since:",dateStart," until:",dateEnd)
steyer_tweets <- search_tweets(steyer_query, n = 100000, retryonratelimit = TRUE)
save(steyer_tweets,file=paste0("steyer_",dateStart,".Rda"))
#Dropped out 2/11/20
#yang_query = paste0("@AndrewYang -filter:retweets -filter:replies since:",dateStart," until:",dateEnd)
#yang_tweets <- search_tweets(yang_query, n = 100000, retryonratelimit = TRUE)
#save(yang_tweets,file=paste0("yang_",dateStart,".Rda"))
rm(list = ls())
library(tidyverse)
library(sentimentr)
#Set date range of files to clean
startYear = "2020"
startMonth = "02"
startDay = 18
endDay = 19
for (j in startDay:endDay) {
loopDate = paste0(startYear,"-",startMonth,"-",formatC(j, width = 2, format ="d", flag = "0"))
loopFile = paste0(loopDate,".Rda")
my_files <- list.files(pattern = loopFile)
my_data <- lapply(my_files, load, .GlobalEnv)
if(exists("sanders_tweets")){
sanders_temp_df <- sentiment(get_sentences(c(sanders_tweets$text)))
sanders_temp_df <- aggregate(sentiment ~ element_id, sanders_temp_df, sum)
sanders_output_df <- merge(sanders_tweets$text,sanders_temp_df$sentiment,by="row.names")
sanders_output_df <- within(sanders_output_df, rm("Row.names"))
sanders_output_df <- rename(sanders_output_df,"Text" = x,"Sentiment" = y)
save(sanders_output_df, file = paste0("sanders_",loopDate,"_sentiment.Rda"))
rm(sanders_tweets, sanders_temp_df, sanders_output_df)
}
if(exists("biden_tweets"))
{
biden_temp_df <- sentiment(get_sentences(c(biden_tweets$text)))
biden_temp_df <- aggregate(sentiment ~ element_id, biden_temp_df, sum)
biden_output_df <- merge(biden_tweets$text,biden_temp_df$sentiment,by="row.names")
biden_output_df <- within(biden_output_df, rm("Row.names"))
biden_output_df <- rename(biden_output_df,"Text" = x,"Sentiment" = y)
save(biden_output_df, file = paste0("biden_",loopDate,"_sentiment.Rda"))
rm(biden_tweets, biden_temp_df, biden_output_df)
}
if(exists("warren_tweets")){
warren_temp_df <- sentiment(get_sentences(c(warren_tweets$text)))
warren_temp_df <- aggregate(sentiment ~ element_id, warren_temp_df, sum)
warren_output_df <- merge(warren_tweets$text,warren_temp_df$sentiment,by="row.names")
warren_output_df <- within(warren_output_df, rm("Row.names"))
warren_output_df <- rename(warren_output_df,"Text" = x,"Sentiment" = y)
save(warren_output_df, file = paste0("warren_",loopDate,"_sentiment.Rda"))
rm(warren_tweets, warren_temp_df, warren_output_df)
}
if(exists("buttigieg_tweets")){
buttigieg_temp_df <- sentiment(get_sentences(c(buttigieg_tweets$text)))
buttigieg_temp_df <- aggregate(sentiment ~ element_id, buttigieg_temp_df, sum)
buttigieg_output_df <- merge(buttigieg_tweets$text,buttigieg_temp_df$sentiment,by="row.names")
buttigieg_output_df <- within(buttigieg_output_df, rm("Row.names"))
buttigieg_output_df <- rename(buttigieg_output_df,"Text" = x,"Sentiment" = y)
save(buttigieg_output_df, file = paste0("buttigieg_",loopDate,"_sentiment.Rda"))
rm(buttigieg_tweets, buttigieg_temp_df, buttigieg_output_df)
}
if(exists("klobuchar_tweets"))
{
klobuchar_temp_df <- sentiment(get_sentences(c(klobuchar_tweets$text)))
klobuchar_temp_df <- aggregate(sentiment ~ element_id, klobuchar_temp_df, sum)
klobuchar_output_df <- merge(klobuchar_tweets$text,klobuchar_temp_df$sentiment,by="row.names")
klobuchar_output_df <- within(klobuchar_output_df, rm("Row.names"))
klobuchar_output_df <- rename(klobuchar_output_df,"Text" = x,"Sentiment" = y)
save(klobuchar_output_df, file = paste0("klobuchar_",loopDate,"_sentiment.Rda"))
rm(klobuchar_tweets, klobuchar_temp_df, klobuchar_output_df)
}
if(exists("bloomberg_tweets")){
bloomberg_temp_df <- sentiment(get_sentences(c(bloomberg_tweets$text)))
bloomberg_temp_df <- aggregate(sentiment ~ element_id, bloomberg_temp_df, sum)
bloomberg_output_df <- merge(bloomberg_tweets$text,bloomberg_temp_df$sentiment,by="row.names")
bloomberg_output_df <- within(bloomberg_output_df, rm("Row.names"))
bloomberg_output_df <- rename(bloomberg_output_df,"Text" = x,"Sentiment" = y)
save(bloomberg_output_df, file = paste0("bloomberg_",loopDate,"_sentiment.Rda"))
rm(bloomberg_tweets, bloomberg_temp_df, bloomberg_output_df)
}
if(exists("steyer_tweets")){
steyer_temp_df <- sentiment(get_sentences(c(steyer_tweets$text)))
steyer_temp_df <- aggregate(sentiment ~ element_id, steyer_temp_df, sum)
steyer_output_df <- merge(steyer_tweets$text,steyer_temp_df$sentiment,by="row.names")
steyer_output_df <- within(steyer_output_df, rm("Row.names"))
steyer_output_df <- rename(steyer_output_df,"Text" = x,"Sentiment" = y)
save(steyer_output_df, file = paste0("steyer_",loopDate,"_sentiment.Rda"))
rm(steyer_tweets, steyer_temp_df, steyer_output_df)
}
if(exists("yang_tweets")){
yang_temp_df <- sentiment(get_sentences(c(yang_tweets$text)))
yang_temp_df <- aggregate(sentiment ~ element_id, yang_temp_df, sum)
yang_output_df <- merge(yang_tweets$text,yang_temp_df$sentiment,by="row.names")
yang_output_df <- within(yang_output_df, rm("Row.names"))
yang_output_df <- rename(yang_output_df,"Text" = x,"Sentiment" = y)
save(yang_output_df, file = paste0("yang_",loopDate,"_sentiment.Rda"))
rm(yang_tweets, yang_temp_df, yang_output_df)
}
}
#Set date range of files to clean
startYear = "2020"
startMonth = 02
startDay = 18
endDay = 19
for (j in startDay:endDay) {
cs <- data.frame(Month = integer(),
Day = integer(),
Candidate = character(),
Text = character(),
Sentiment = double())
loopDate = paste0(startYear,"-",
formatC(startMonth, width = 2, format ="d", flag = "0"),"-",
formatC(j, width = 2, format ="d", flag = "0"))
loopFile = paste0(loopDate,"_sentiment.Rda")
my_files <- list.files(pattern = loopFile)
my_data <- lapply(my_files, load, .GlobalEnv)
if(exists("sanders_output_df")){
sanders_output_df$Month = startMonth
sanders_output_df$Day = j
sanders_output_df$Candidate = "sanders"
cs <- rbind(cs, sanders_output_df)
rm(sanders_output_df)
}
if(exists("biden_output_df")){
biden_output_df$Month = startMonth
biden_output_df$Day = j
biden_output_df$Candidate = "biden"
cs <- rbind(cs, biden_output_df)
rm(biden_output_df)
}
if(exists("warren_output_df")){
warren_output_df$Month = startMonth
warren_output_df$Day = j
warren_output_df$Candidate = "warren"
cs <- rbind(cs, warren_output_df)
rm(warren_output_df)
}
if(exists("buttigieg_output_df")){
buttigieg_output_df$Month = startMonth
buttigieg_output_df$Day = j
buttigieg_output_df$Candidate = "buttigieg"
cs <- rbind(cs, buttigieg_output_df)
rm(buttigieg_output_df)
}
if(exists("klobuchar_output_df")){
klobuchar_output_df$Month = startMonth
klobuchar_output_df$Day = j
klobuchar_output_df$Candidate = "klobuchar"
cs <- rbind(cs, klobuchar_output_df)
rm(klobuchar_output_df)
}
if(exists("bloomberg_output_df")){
bloomberg_output_df$Month = startMonth
bloomberg_output_df$Day = j
bloomberg_output_df$Candidate = "bloomberg"
cs <- rbind(cs, bloomberg_output_df)
rm(bloomberg_output_df)
}
if(exists("steyer_output_df")){
steyer_output_df$Month = startMonth
steyer_output_df$Day = j
steyer_output_df$Candidate = "steyer"
cs <- rbind(cs, steyer_output_df)
rm(steyer_output_df)
}
if(exists("yang_output_df")){
yang_output_df$Month = startMonth
yang_output_df$Day = j
yang_output_df$Candidate = "yang"
cs <- rbind(cs, yang_output_df)
rm(yang_output_df)
}
save(cs, file = paste0(loopDate,"_cs.Rda"))
rm(cs)
}
library(plyr)
#Create vector of all daily sentiment data frames
loopFile = paste0("_cs.Rda")
my_files <- list.files(pattern = loopFile)
#Initialize master data frame
fs <- data.frame(Month = integer(),
Day = integer(),
Candidate = character(),
Text = character(),
Sentiment = double())
#Combine all daily sentiment data frames into master data frame
for (i in my_files){
load(i)
fs <- rbind(fs, cs)
rm(cs)
}
#Create summary statistics
fs$Abs_Sentiment = abs(fs$Sentiment)
avg_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_sentiment <- rename(avg_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
avg_abs_sentiment <- aggregate(fs[6:6], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_abs_sentiment <- rename(avg_abs_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
total_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), sum)
total_sentiment <- rename(total_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
absolute_sentiment <- aggregate(fs[6:6], list(fs$Day, fs$Month, fs$Candidate), sum)
temp_sentiment <- aggregate(fs[6:6], list(fs$Day, fs$Month), sum)
absolute_sentiment <- merge(absolute_sentiment, temp_sentiment, by=c("Group.1","Group.2"))
absolute_sentiment$Percent_Sentiment = absolute_sentiment$Abs_Sentiment.x/absolute_sentiment$Abs_Sentiment.y
absolute_sentiment <- rename(absolute_sentiment, c("Group.1" = "Day", "Group.2" = "Month", "Group.3" = "Candidate"))
count_tweets <- as.data.frame(table(fs$Day, fs$Month, fs$Candidate))
temp_tweets <- as.data.frame(table(fs$Day, fs$Month))
count_tweets <- merge(count_tweets, temp_tweets, by=c("Var1","Var2"))
count_tweets$Percent_Tweets = count_tweets$Freq.x/count_tweets$Freq.y
count_tweets <- rename(count_tweets, c("Var1" = "Day", "Var2" = "Month", "Var3" = "Candidate"))
rm(fs, temp_sentiment, temp_tweets)
#Consolidate summary statistics
statistics <- merge(absolute_sentiment, total_sentiment, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, count_tweets, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, avg_sentiment, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, avg_abs_sentiment, by=c("Day", "Month", "Candidate"))
statistics$Date = paste0(statistics$Month,"/",formatC(statistics$Day, width = 2, format ="d", flag = "0"),"/2020")
rm(absolute_sentiment, total_sentiment, count_tweets, avg_sentiment, avg_abs_sentiment)
statistics <- within(statistics, rm(Abs_Sentiment.y, Freq.y, Day, Month))
statistics <- rename(statistics, c("Abs_Sentiment.x" = "Total_Absolute_Sentiment",
"Sentiment.x" = "Total_Sentiment",
"Freq.x" = "Count_Tweets",
"Sentiment.y" = "Average_Sentiment",
"Abs_Sentiment" = "Average_Absolute_Sentiment"))
save(statistics, file = "statistics.Rda")
library(plyr)
#Create vector of all daily sentiment data frames
loopFile = paste0("_cs.Rda")
my_files <- list.files(pattern = loopFile)
#Initialize master data frame
fs <- data.frame(Month = integer(),
Day = integer(),
Candidate = character(),
Text = character(),
Sentiment = double())
#Combine all daily sentiment data frames into master data frame
for (i in my_files){
load(i)
fs <- rbind(fs, cs)
rm(cs)
}
#Create summary statistics
fs$Abs_Sentiment = abs(fs$Sentiment)
avg_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_sentiment <- rename(avg_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
avg_abs_sentiment <- aggregate(fs[6:6], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_abs_sentiment <- rename(avg_abs_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
total_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), sum)
total_sentiment <- rename(total_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
absolute_sentiment <- aggregate(fs[6:6], list(fs$Day, fs$Month, fs$Candidate), sum)
temp_sentiment <- aggregate(fs[6:6], list(fs$Day, fs$Month), sum)
absolute_sentiment <- merge(absolute_sentiment, temp_sentiment, by=c("Group.1","Group.2"))
absolute_sentiment$Percent_Sentiment = absolute_sentiment$Abs_Sentiment.x/absolute_sentiment$Abs_Sentiment.y
absolute_sentiment <- rename(absolute_sentiment, c("Group.1" = "Day", "Group.2" = "Month", "Group.3" = "Candidate"))
count_tweets <- as.data.frame(table(fs$Day, fs$Month, fs$Candidate))
temp_tweets <- as.data.frame(table(fs$Day, fs$Month))
count_tweets <- merge(count_tweets, temp_tweets, by=c("Var1","Var2"))
count_tweets$Percent_Tweets = count_tweets$Freq.x/count_tweets$Freq.y
count_tweets <- rename(count_tweets, c("Var1" = "Day", "Var2" = "Month", "Var3" = "Candidate"))
rm(fs, temp_sentiment, temp_tweets)
#Consolidate summary statistics
statistics <- merge(absolute_sentiment, total_sentiment, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, count_tweets, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, avg_sentiment, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, avg_abs_sentiment, by=c("Day", "Month", "Candidate"))
statistics$Date = paste0(statistics$Month,"/",formatC(statistics$Day, width = 2, format ="d", flag = "0"),"/2020")
rm(absolute_sentiment, total_sentiment, count_tweets, avg_sentiment, avg_abs_sentiment)
statistics <- within(statistics, rm(Abs_Sentiment.y, Freq.y, Day, Month))
statistics <- rename(statistics, c("Abs_Sentiment.x" = "Total_Absolute_Sentiment",
"Sentiment.x" = "Total_Sentiment",
"Freq.x" = "Count_Tweets",
"Sentiment.y" = "Average_Sentiment",
"Abs_Sentiment" = "Average_Absolute_Sentiment"))
save(statistics, file = "statistics.Rda")
#Create vector of all daily sentiment data frames
loopFile = paste0("_cs.Rda")
my_files <- list.files(pattern = loopFile)
#Initialize master data frame
fs <- data.frame(Month = integer(),
Day = integer(),
Candidate = character(),
Text = character(),
Sentiment = double())
#Combine all daily sentiment data frames into master data frame
for (i in my_files){
load(i)
fs <- rbind(fs, cs)
rm(cs)
}
fs$Abs_Sentiment = abs(fs$Sentiment)
avg_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_sentiment <- rename(avg_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
View(avg_sentiment)
View(avg_sentiment)
fs$Abs_Sentiment = abs(fs$Sentiment)
avg_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_sentiment <- plyr::rename(avg_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
#Create summary statistics
fs$Abs_Sentiment = abs(fs$Sentiment)
avg_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_sentiment <- plyr::rename(avg_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
avg_abs_sentiment <- aggregate(fs[6:6], list(fs$Candidate, fs$Day, fs$Month), mean)
avg_abs_sentiment <- plyr::rename(avg_abs_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
total_sentiment <- aggregate(fs[2:2], list(fs$Candidate, fs$Day, fs$Month), sum)
total_sentiment <- plyr::rename(total_sentiment, c("Group.1" = "Candidate", "Group.2" = "Day", "Group.3" = "Month"))
absolute_sentiment <- aggregate(fs[6:6], list(fs$Day, fs$Month, fs$Candidate), sum)
temp_sentiment <- aggregate(fs[6:6], list(fs$Day, fs$Month), sum)
absolute_sentiment <- merge(absolute_sentiment, temp_sentiment, by=c("Group.1","Group.2"))
absolute_sentiment$Percent_Sentiment = absolute_sentiment$Abs_Sentiment.x/absolute_sentiment$Abs_Sentiment.y
absolute_sentiment <- plyr::rename(absolute_sentiment, c("Group.1" = "Day", "Group.2" = "Month", "Group.3" = "Candidate"))
count_tweets <- as.data.frame(table(fs$Day, fs$Month, fs$Candidate))
temp_tweets <- as.data.frame(table(fs$Day, fs$Month))
count_tweets <- merge(count_tweets, temp_tweets, by=c("Var1","Var2"))
count_tweets$Percent_Tweets = count_tweets$Freq.x/count_tweets$Freq.y
count_tweets <- plyr::rename(count_tweets, c("Var1" = "Day", "Var2" = "Month", "Var3" = "Candidate"))
rm(fs, temp_sentiment, temp_tweets)
#Consolidate summary statistics
statistics <- merge(absolute_sentiment, total_sentiment, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, count_tweets, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, avg_sentiment, by=c("Day", "Month", "Candidate"))
statistics <- merge(statistics, avg_abs_sentiment, by=c("Day", "Month", "Candidate"))
statistics$Date = paste0(statistics$Month,"/",formatC(statistics$Day, width = 2, format ="d", flag = "0"),"/2020")
rm(absolute_sentiment, total_sentiment, count_tweets, avg_sentiment, avg_abs_sentiment)
statistics <- within(statistics, rm(Abs_Sentiment.y, Freq.y, Day, Month))
statistics <- plyr::rename(statistics, c("Abs_Sentiment.x" = "Total_Absolute_Sentiment",
"Sentiment.x" = "Total_Sentiment",
"Freq.x" = "Count_Tweets",
"Sentiment.y" = "Average_Sentiment",
"Abs_Sentiment" = "Average_Absolute_Sentiment"))
save(statistics, file = "statistics.Rda")
library(ggplot2)
library(ggthemes)
load("statistics.Rda")
ggplot(data = statistics, aes(x = Date, y = Percent_Sentiment, group = Candidate, color = Candidate)) +
#geom_point() +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = statistics, aes(x = Date, y = Average_Sentiment, group = Candidate, color = Candidate)) +
#geom_point() +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = statistics, aes(x = Date, y = Average_Absolute_Sentiment, group = Candidate, color = Candidate)) +
#geom_point() +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = statistics, aes(x = Date, y = Percent_Sentiment, group = Candidate, color = Candidate)) +
#geom_point() +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
rm(list = ls())
poll_avg = read.csv("538_avg.csv")
poll_avg = subset(poll_avg, state = "National")
View(poll_avg)
View(poll_avg)
poll_avg = poll_avg[ which (poll_avg$state == "National")]
poll_avg = poll_avg[ which (poll_avg$state == "National"),]
View(poll_avg)
View(poll_avg)
poll_avg = read.csv("538_avg.csv")
#Filter state polling averages
poll_avg_nat = poll_avg[ which (poll_avg$state == "National"),]
poll_avg_state = poll_avg[ which (poll_avg$state != "National"),]
rm(poll_avg)
View(poll_avg_nat)
View(poll_avg_nat)
save(poll_avg_nat, "poll_avg_nat.Rda")
save(poll_avg_state, "poll_avg_state.Rda")
rm(poll_avg_nat)
rm(poll_avg_state)
poll_avg = read.csv("538_avg.csv")
#Filter state polling averages
poll_avg_nat = poll_avg[ which (poll_avg$state == "National"),]
poll_avg_state = poll_avg[ which (poll_avg$state != "National"),]
rm(poll_avg)
save(poll_avg_nat, file="poll_avg_nat.Rda")
save(poll_avg_state, file="poll_avg_state.Rda")
rm(poll_avg_nat)
rm(poll_avg_state)
library(ggplot2)
library(ggthemes)
load("statistics.Rda")
load("poll_avg_nat.Rda")
load("poll_avg_state.Rda")
#Plot Percent Sentiment data
ggplot(data = statistics,
aes(x = Date,
y = Percent_Sentiment,
group = Candidate,
color = Candidate)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot FiveThirtyEight national polling average
ggplot(data = poll_avg_nat,
aes(x = modeldate,
y = pct_estimate,
group = candidate_name,
color = candidate_name)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
rm(poll_avg_nat)
rm(poll_avg_state)
poll_avg = read.csv("538_avg.csv")
#Filter state polling averages
poll_avg_nat = poll_avg[ which (poll_avg$state == "National"
& as.Date(poll_avg$modeldate) >= as.Date("2/4/2020")),]
poll_avg_nat = poll_avg[ which (poll_avg$state == "National"
& as.Date(poll_avg$modeldate,"%m/%d/%Y") >= as.Date("2/4/2020","%m/%d/%Y")),]
View(poll_avg_nat)
View(poll_avg_nat)
Filter state polling averages
poll_avg_nat = poll_avg[ which (poll_avg$state == "National"
& as.Date(poll_avg$modeldate,"%m/%d/%Y") >= as.Date("2/4/2020","%m/%d/%Y")),]
poll_avg_state = poll_avg[ which (poll_avg$state != "National"
& as.Date(poll_avg$modeldate,"%m/%d/%Y") >= as.Date("2/4/2020","%m/%d/%Y")),]
rm(poll_avg)
save(poll_avg_nat, file="poll_avg_nat.Rda")
save(poll_avg_state, file="poll_avg_state.Rda")
rm(poll_avg_nat)
rm(poll_avg_state)
library(ggplot2)
library(ggthemes)
load("statistics.Rda")
load("poll_avg_nat.Rda")
load("poll_avg_state.Rda")
#Plot Percent Sentiment data
ggplot(data = statistics,
aes(x = Date,
y = Percent_Sentiment,
group = Candidate,
color = Candidate)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot FiveThirtyEight national polling average
ggplot(data = poll_avg_nat,
aes(x = modeldate,
y = pct_estimate,
group = candidate_name,
color = candidate_name)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
#Plot Percent Sentiment data
ggplot(data = statistics,
aes(x = Date,
y = Percent_Sentiment,
group = Candidate,
color = Candidate)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot FiveThirtyEight national polling average
ggplot(data = poll_avg_nat,
aes(x = modeldate,
y = pct_estimate,
group = candidate_name,
color = candidate_name)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
#Plot Percent Sentiment data
ggplot(data = statistics,
aes(x = Date,
y = Percent_Sentiment,
group = Candidate,
color = Candidate)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot FiveThirtyEight national polling average
ggplot(data = poll_avg_nat,
aes(x = as.Date(modeldate, "%m/%d/%Y"),
y = pct_estimate,
group = candidate_name,
color = candidate_name)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
#Plot Percent Sentiment data
ggplot(data = statistics,
aes(x = as.Date(Date, "%m/%d/%Y"),
y = Percent_Sentiment,
group = Candidate,
color = Candidate)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Plot FiveThirtyEight national polling average
ggplot(data = poll_avg_nat,
aes(x = as.Date(modeldate, "%m/%d/%Y"),
y = pct_estimate,
group = candidate_name,
color = candidate_name)) +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
